-------------------------------------------------------------------------------
EM API Release Notes
-------------------------------------------------------------------------------

- See em-odp/README for usage and compilation instructions.
- See em-odp/CHANGE_NOTES for changed and added features.

-------------------------------------------------------------------------------
API 2.8 (EM_VERSION_API_MAJOR=2, EM_VERSION_API_MINOR=8)
-------------------------------------------------------------------------------
Backwards compatible with EM 2.7 API

1. Add a define for the base-name of the EM core-specific queue groups (one per
   EM-core): #define EM_QUEUE_GROUP_CORE_BASE_NAME "core"
   The full queue group name for a single-core queue group is: "core" + "%d",
   which gives "core0", "core1", ... "core99", ...
   EM earlier relied on these queue groups for internal core specific
   messaging and also allowed applicatioins to use them. Currently EM
   does not internally need these groups but will create them based on
   an EM config file option for applications relying on their existence.

-------------------------------------------------------------------------------
API 2.7 (EM_VERSION_API_MAJOR=2, EM_VERSION_API_MINOR=7)
-------------------------------------------------------------------------------
Backwards compatible with EM 2.6 API

1. EM version number APIs:
   (see include/event_machine/api/event_machine_version.h.in, which is used to
    create event_machine_version.h during package configuration/build)
  - Version number macros and define constants that can be used to identify the
    EM API and implementation versions at build time.
    Can be used for conditional compilation:
        #if EM_VERSION > EM_VERSION_NUM(2.7.0.0) ...
          or
        #if EM_VERSION_API > EM_VERSION_API_NUM(2.7) ...
  - Runtime API functions that can be used to check the EM API and
    implementation numbers at runtime.
    The build-time and runtime versions numbers may differ e.g. if the
    application has been compiled against the header files of a certain
    EM release and later the EM shared library is updated without recompilation
    of the application.
      const char *em_version_api_str(void);
      unsigned int em_version_api_num(void);
      const char *em_version_str(void);
      unsigned int em_version_num(void);

2. EM Event User Area:
   (see include/event_machine/api/event_machine_event.h)
   The event user area is a fixed sized area located within the event metadata
   (i.e. outside of the event payload) that can be used to store application
   specific event related data without the need to adjust the payload.
   The event user area is configured during EM event pool creation and thus the
   size of the user area is set per pool.
   Note that the user area content is not initialized by EM, neither em_alloc()
   nor em_free() will touch it and thus it might contain old user data set the
   last time the area was used during a previous allocation of the same event.
   Since the user area is not part of the event payload, it will not be
   transmitted as part of a packet etc.

   - Get a pointer to the event user area, optionally along with its size.
     void *em_event_uarea_get(em_event_t event, size_t *size/*out*/);

   - Pool config for the Event User Area.
     (see include/event_machine/platform/event_machine_pool.h)
     Pool config em_pool_cfg_t::user_area.{.in_use, .size} has been updated to
     include configuration options for the event user area.
     The default event user area size can additionally be set via the
     EM config file config/em-odp.conf:
     pool: {
        ...
        # Default event user area size in bytes for all events from all pools.
        #
        # This is a global setting that can be overridden per pool using
        # 'em_pool_cfg_t::user_area{}' with em_pool_create().
        #
        user_area_size = 0
        ...
     }

3. EM Event User Area ID:
   (see include/event_machine/api/event_machine_event.h)
   The event user area can be associated with an optional ID that e.g. can be
   used to identify the contents of the actual user area data. The ID is stored
   outside of the actual user area data and is available for use even if the
   user area size has been set to zero(0) for the pool the event was allocated
   from.
   - Get the event user area ID along with information if it has been set
     em_status_t em_event_uarea_id_get(em_event_t event, bool *isset /*out*/,
                                       uint16_t *id /*out*/);
   - Set the event user area ID
     em_status_t em_event_uarea_id_set(em_event_t event, uint16_t id);

   - Get the event user area information for a given event.
     em_status_t em_event_uarea_info(em_event_t event,
                                     em_event_uarea_info_t *uarea_info /*out*/);

-------------------------------------------------------------------------------
API 2.6 (EM_API_VERSION_MAJOR=2, EM_API_VERSION_MINOR=6)
-------------------------------------------------------------------------------
Backwards compatible with EM 2.5 API

1. Timer:
   (see em-odp/include/event_machine/add-ons/event_machine_timer.h for details)
  - Add new timer clock source choices (em_timer_clksrc_t) to select the
    timer clock source in case multiple are supported:
    EM_TIMER_CLKSRC_0, EM_TIMER_CLKSRC_1, ...(up to)..., EM_TIMER_CLKSRC_5.
    Backwards compatible macros (EM_TIMER_CLKSRC_CPU, EM_TIMER_CLKSRC_EXT) are
    provided for full compatibility with older code.
    EM_TIMER_CLKSRC_DEFAULT is always available and is a fully portable
    definition.

2. Event:
   (see em-odp/include/event_machine/api/event_machine_event.h for details)
  - Event cloning:
    - em_event_t em_event_clone(em_event_t event, em_pool_t pool);
      Allocate a new event with identical payload to the given event.
      The event metadata and internal headers will _not_ be cloned.
      The optional 'pool' argument is used to specify the event pool to allocate
      the cloned event from. Use 'EM_POOL_UNDEF' to clone from the same pool as
      'event' was allocated from.
      The event-type of 'event' must be suitable for allocation from 'pool'
      (e.g. EM_EVENT_TYPE_PACKET can not be allocated from a pool supporting
      only EM_EVENT_TYPE_SW)
      The function returns the cloned event or EM_EVENT_UNDEF on error.

  - Event/Pool: Get the handle of the pool the event was allocated from.
    - em_pool_t em_event_get_pool(em_event_t event);
      Returns the EM event-pool the event was allocated from or EM_POOL_UNDEF if
      no EM pool is found. EM_POOL_UNDEF is returned also for a valid event that
      has been allocated from a pool external to EM (no error is reported).
      The EM event-pool for the given event can only be obtained if the event
      has been allocated from a pool created with em_pool_create(). For other
      pools, e.g. external (to EM) pktio pools, EM_POOL_UNDEF is returned.

  - Marking event(s) as "free"
    - void em_event_mark_free(em_event_t event);
    - void em_event_mark_free_multi(const em_event_t events[], int num);
    Mark the event state as "free" and then rely on HW / mechanisms external
    to EM to actually free the event(s) back into the event pool.
    - em_event_mark_free(): Indicates a user-given promise to EM that the event
      will be freed back into the pool it was allocated from e.g. by HW or
      device drivers (external to EM). Calling em_event_mark_free() transfers
      event ownership away from the user, and thus the event must not be used or
      touched by the user anymore.
      EM will, after this API-call, treat the event as "freed" and any further
      API operations or usage might lead to EM errors (depending on the
      error-check level), e.g. em_send/free/tmo_set/ack(event) etc. is forbidden
      after em_event_mark_free(event).
    - em_event_mark_free_multi(): Similar to em_event_mark_free(), but allows
      the marking of multiple events as "free" with one function call.
    Note: Registered API-callback hooks for em_free/_multi()
          (em_api_hook_free_t) will NOT be called.

 - Unmarking event(s) previously marked "free"
    - void em_event_unmark_free(em_event_t event);
    - void em_event_unmark_free_multi(const em_event_t events[], int num);
    Unmark event(s) previously marked as "free" (i.e mark as "allocated" again).
    Note: This is for recovery situations only and can potenially crash the
          application if used incorrectly! Unmarking the free-state of an event
          that has already been freed will lead to fatal error.
    - em_event_unmark_free(): Revert an event's "free" state, as set by
      em_event_mark_free() back to the state before the mark-free function call.
      Any further usage of the event after em_event_mark_free(), by EM or the
      user, will result in error when calling em_event_unmark_free() since the
      state has become unrecoverable.
      => the only allowed EM API call after em_event_mark_free() (for a certain
         event) is em_event_unmark_free() when it is certain that the event, due
         to some external error, will not be freed otherwise and must be
         recovered back into the EM-domain so that calling em_free() by the user
         is possible.
      Calling em_event_unmark_free() transfers event ownership back to the user
      again.
      Note: Unmark-send and unmark-free are the only valid cases of using an
            event that the user no longer owns, all other such uses leads to
	    fatal error.
    - em_event_unmark_free_multi(): Unmark multiple events previously marked as
      "free". Similar to em_event_unmark_free(), but allows to do the
      "free"-unmarking of multiple events with one function call.

3. Queue:
  (see em-odp/include/event_machine/api/event_machine_queue.h)
  - Number of queue priorities:
    - int em_queue_get_num_prio(int *num_runtime);
      The function returns the number of queue priorities available.
      Optionally, the amount of actual runtime priorities can be inquired.
      The valid queue priority range is from 0 (lowest priority) to
      em_queue_get_num_prio() - 1.
      The runtime environment may provide a different amount of priority levels.
      EM priorities are in that case mapped to the runtime values depending on
      "priority map-mode" selected in the runtime configuration file
      (config/em-odp.conf).

4. Extension APIs for EM<->ODP conversions:
   (see include/event_machine/platform/event_machine_odp_ext.h)
  - Convert between EM and ODP pools:
    - int em_odp_pool2odp(em_pool_t pool, odp_pool_t odp_pools[/out/], int num);
    - em_pool_t em_odp_pool2em(odp_pool_t odp_pool);

    - em_odp_pool2odp(): Get the ODP pools used as subpools in a given EM event
      pool. An EM event pool consists of 1 to 'EM_MAX_SUBPOOLS' subpools. Each
      subpool is an ODP pool. This function outputs the ODP pool handles of
      these subpools into a user-provided array and returns the number of
      handles written. The obtained ODP pools must not be deleted or altered
      outside of EM, e.g. these ODP pools must only be deleted as part of an
      EM event pool using em_pool_delete().
      ODP pool handles obtained through this function can be used to
        - configure ODP pktio to use an ODP pool created via EM (allows for
          better ESV tracking)
        - print ODP-level pool statistics with ODP APIs etc.
      The function returns the number of ODP pools filled into 'odp_pools[]'.

    - em_odp_pool2em(): Get the EM event pool that a given ODP pool belongs to.
      An EM event pool consists of 1 to 'EM_MAX_SUBPOOLS' subpools. Each subpool
      is an ODP pool. This function returns the EM event pool that contains the
      given ODP pool as a subpool or EM_POOL_UNDEF if the ODP pool is not part
      of any EM event pool.

-------------------------------------------------------------------------------
API 2.5 (EM_API_VERSION_MAJOR=2, EM_API_VERSION_MINOR=5)
-------------------------------------------------------------------------------
Not backwards compatible with previous API version, API 2.5 contains modified
types and functions requiring small changes to older code.

1. Timer: timer version updated from v2.0 to v2.1,
   see em-odp/include/event_machine/add-ons/event_machine_timer.h for details.
   - New Timer APIs for tick<->ns conversions:
     - em_timer_tick_to_ns()
     - em_timer_ns_to_tick()

   - New Error return codes for em_tmo_set_abs() and em_tmo_set_periodic()
     related to timing errors:
     EM_OK          success (event taken)
     EM_ERR_TOONEAR failure, tick value is past or too close to current time
     EM_ERR_TOOFAR  failure, tick value exceeds timer capability (too far ahead)
     (other_codes)  other failure
     New Error return codes for em_tmo_ack():
     EM_OK            success
     EM_ERR_CANCELED  timer has been cancelled
     (other_codes)    failure

2. Event: New APIs introduced together with EM feature
          "Event State Verification" (ESV), see CHANGE_NOTES for EM v2.5.0.
   - em_event_mark_send(event, queue): Mark the event as "sent" (without
     calling em_send...()).
     Indicates a user-given promise to EM that the event will later appear into
     'queue' by some means other than an explicit user call to em_send...().
     Calling em_event_mark_send() transfers event ownership away from the user,
     and thus the event must not be used or touched by the user anymore (the
     only exception is (hw) error recovery where the "sent" state can be
     cancelled by using em_event_unmark_send() - dangerous!).

   - em_event_unmark_send(event): Unmark an event previously marked as "sent"
                                  (i.e mark as "unsent")
     Note: This is for recovery situations only and can potenially crash the
           application if used incorrectly!
     Revert an event's "sent" state, as set by em_event_mark_send(), back to the
     state before that function call.
     Any further usage of the event after em_event_mark_send(), by EM or
     the user, will result in error when calling em_event_unmark_send() since
     the state has become unrecoverable.
       => the only allowed EM API call after em_event_mark_send() is
          em_event_unmark_send() if it is certain that the event, due to some
          external error, will never be sent into EM again otherwise.
     Calling em_event_unmark_send() transfers event ownership back to the user
     again.
     Note2: This is the only valid case of using an event that the user no
            longer owns - all other such uses leads to fatal error.

3. Pool:
   - Possibility to set the event payload headroom of pkt-events during
     EM event pool creation (em_pool_create()) with the new config params:
     em_pool_cfg_t::pkt.headroom.in_use & .value

4. Extension APIs for EM<->ODP conversions
  - Conversion functions between EM events to/from ODP events changed:
    - void em_odp_events2odp(const em_event_t events[],
                             odp_event_t odp_events[/*out*/], const int num)
    - void em_odp_events2em(const odp_event_t odp_events[],
                            em_event_t events[/*out*/], const int num)

5. Misc
   - Improved C++ support: including EM API header files into a C++ project
     now avoids errors related to C vs. C++ typecasting.
   - API function pointer arguments should be "const" if object is not modified

-------------------------------------------------------------------------------
API 2.4 (EM_API_VERSION_MAJOR=2, EM_API_VERSION_MINOR=4)
-------------------------------------------------------------------------------
Not backwards compatible with previous API version, API 2.4 contains modified
types requiring small changes to older code.

1. Timer: timer version updated from v1.1 to v2.0,
   see em-odp/include/event_machine/add-ons/event_machine_timer.h for details.
   New or updated timer types and APIs:
   - em_timer_attr_t: *updated* type that MUST be initialized with
                      em_timer_attr_init() before passing it to
                      em_timer_create().
     Note: timer resolution is given to em_timer_create() as either
           nanoseconds or Hertz:
	   em_timer_attr_t::resparam.res_ns or .res_hz (new option).
           The user must choose which one to use by setting the other one to 0.

   - em_timer_attr_init(): Mandatory initialization of timer attributes.
     Enforce the following sequence:
        em_timer_attr_t attr;
        em_timer_attr_init(&attr); /* Now mandatory */
        ...
        em_timer_t tmr = em_timer_create(&attr);
     Timer-create will fail if attr-init has been omitted.

   - em_timer_capability() & em_timer_capability_t: Inquire timer capabilities.

   - em_timer_res_capability() & em_timer_res_param_t:
     Inquire timer capabilities for a specific resolution or maximum timeout.

   - em_tmo_set_periodic(): Allow an absolute start time for periodic timeouts
     with the new API em_tmo_set_periodic(..., em_timer_tick_t start_abs, ...)
     Note: Prefer the new em_tmo_set_periodic() for activating/setting periodic
           timeouts over em_tmo_set_rel().
           Use em_tmo_set_abs() or em_tmo_set_rel() for oneshot timeouts.

   - em_tmo_get_stats() & em_tmo_stats_t: Get timeout statistics counters.
     Currently meaningful for periodic timeouts only, 0 otherwise.

2. Pool:
   - em_pool_cfg_init(): pool-config initialization function.
     Initialize EM-pool configuration parameters for em_pool_create(),
     i.e. set em_pool_cfg_t to default values for all fields.
     After initialization, the user further needs to update the fields of
     'em_pool_cfg_t' with appropriate sizing information before calling
     em_pool_create().
     Always initialize 'pool_cfg' first with em_pool_cfg_init(pool_cfg) to
     ensure backwards compatibility with potentially added new options.

   - Possibility to configure the core-local event-cache per subpool via
     em_pool_cfg_t::cache_size during EM-pool creation.
     The 'cache_size' param is defined in em_pool_cfg_t as:
     " Maximum number of locally cached subpool events per EM-core.
       Allocating or freeing events from a core-local event-cache
       can be faster than using the global event subpool. Cached
       events are only available on the local core and can reduce
       the number of globally free events in the subpool, thus set
       'num > EM-core-count * cache_size'.
       The actual used cache_size will be smaller than or equal to
       the requested value, depending on the implementation."

3. EO: init: eo-multircv params must be initialized before creating EO.
   Enforce the following sequence:
        em_eo_multircv_param_t param;
        em_eo_multircv_param_init(&param); /* Now mandatory */
        eo = em_eo_create_multircv(..., param);
   EO-create will fail if param-init has been omitted.

4. Queue:
   - em_queue_get_index(): Get a unique index from a given EM queue handle.
     Get a unique index corresponding to the given EM queue handle.
     Returns a unique index in the range 0...EM_MAX_QUEUES-1.
     The same EM queue handle will always map to the same index.
     Only meaningful for queues created within the current EM instance.

4. Add missing const qualifiers into the API.
   Some API calls missed const qualifiers on read-only data pointers.
   Add the missing 'const' and fix the implementation accordingly.

-------------------------------------------------------------------------------
API 2.3 (EM_API_VERSION_MAJOR=2, EM_API_VERSION_MINOR=3)
-------------------------------------------------------------------------------
Not backwards compatible with previous API version, API 2.3 contains modified
types requiring small changes to older code (see 2, 4 and 5).

1. Event: multi-event alloc and free functions
   APIs for allocating or freeing multiple events.
   - em_alloc_multi(): Allocate multiple events.
     Similar to em_alloc(), but allows allocation of multiple events, with same
     properties, with one function call.
     The em_alloc_multi() API function will try to allocate the requested number
     ('num') of events but may fail to do so, e.g. if the pool has run out of
     events, and will return the actual number of events that were successfully
     allocated from the given pool.
   - em_free_multi(): Free multiple events.
     Similar to em_free(), but allows freeing of multiple events with one
     function call.
   See include/event_machine/api/event_machine_event.h:
   em_alloc_multi() and em_free_multi()

2. Hooks: use the same hook-type for all alloc():s and the same for all free():s
   em_api_hook_alloc_t: API-callback hook for em_alloc() and em_alloc_multi().
   em_api_hook_free_t:  API-callback hook for em_free() and em_free_multi().
   Note! em_api_hook_alloc_t and em_api_hook_free_t _changed_ in API 2.3
         to suit both single and multi alloc and frees.
   See include/event_machine/platform/event_machine_hw_types.h:
   em_api_hook_alloc_t and em_api_hook_free_t

3. EO: multi-event EO-receive function
   'em_receive_multi_func_t':
   Similar to the single-event receive function (em_receive_func_t), except that
   multiple events can be passed with one call to the EO receive function.
   A multi-event receive function is taken into use during EO creation with a
   call to em_eo_create_multircv(...). The maximum number of events that the
   multi-event EO receive function is prepared to handle can be set with the
   option 'em_eo_multircv_param_t::max_events' given to em_eo_create_multircv().
   The EM dispatcher will split event batches larger than 'max_events' into
   chunks of 'max_events'.
   Event group handling: All events passed by the EM dispatcher to the
   EO multi-event receive function belong to the same event group (or none)
   - a batch of events containing multiple event groups is split by the
   dispatcher into smaller chunks, each chunk belonging to the same event group
   (or none). The event group count is decremented by the number of events
   passed to the receive function when execution returns to the dispatcher.
   See include/event_machine/api/event_machine_eo.h:
   em_receive_multi_func_t and em_eo_create_multircv().

4. Dispatch: one common enter-callback for multi- and single-receive funcs.
   em_dispatch_enter_func_t: the dispatch enter callback, called before entering
   an EO-receive function, is changed so that one common callback type can be
   used for both single-event and multi-event EO-receive functions.
   Note! 'em_dispatch_enter_func_t' _changed_ in EM API v2.3.
   See include/event_machine/api/event_machine_dispatcher.h:
   em_dispatch_enter_func_t and em_dispatch_register_enter_cb()

5. Init: core masks for 'input_poll_fn' and 'output_drain_fn' added to em_conf_t
   Add the 'input_poll_mask' and 'output_drain_mask' fields to em_conf_t.
   These masks define the logical EM cores on which these functions
   are executed.
   Note! New fields added to em_conf_t in API 2.3, user must initialize these
         added fields - use em_conf_init(), see 6.
   See include/event_machine/platform/event_machine_init.h:
   em_conf_t and em_conf_init()

6. Init: use em_conf_init(em_conf_t *conf) to init the EM config params.
   Using em_conf_init() provides better backwards compatibility since
   all options will be set to default values before use.
   All users should call em_conf_init() before calling em_init()!
   See include/event_machine/platform/event_machine_init.h:
   em_conf_t and em_conf_init()

7. Event: APIs to get the event type(s) of multiple events
   Two EM APIs added:
   - Get the event types of multiple events:
     em_event_get_type_multi()
   - Get the number of events that have the same event type:
     em_event_same_type_multi()
   See include/event_machine/api/event_machine_event.h:
   em_event_get_type_multi() and em_event_same_type_multi()

-------------------------------------------------------------------------------
API 2.2 (EM_API_VERSION_MAJOR=2, EM_API_VERSION_MINOR=2)
-------------------------------------------------------------------------------
  Backwards compatible with EM 2.1 API with one EXCEPTION:
  Introducing the new 'em_pool_cfg_t::align_offset{}' option into the existing
  em_pool_conf_t structure is potentially dangerous if these new fields are not
  initialized properly. Initializing the whole em_pool_cfg_t to '0' with memset
  before use is safe and equals API 2.1 behaviour.

1. Pool option to set the event payload alignment offset:
   Add the new 'em_pool_cfg_t::align_offset{}' option to be able to set the
   needed payload alignment offset per pool (during EM pool creation with
   em_pool_create(..., pool_cfg)).
   Setting 'align_offset.in_use = 0' disables the pool-specific alignment offset
   and equals API 2.1 behaviour.
   See the documentation for em_pool_cfg_t for a thorough explanation.
2. Timer option to use an external timer clock source:
   Add the em_timer_clksrc_t::EM_TIMER_CLKSRC_EXT option.
   Also add the EM_TIMER_CLKSRC_CPU option to explicitly request using the
   CPU clock as the timer clock source (behaviour is the same as using
   EM_TIMER_CLKSRC_DEFAULT).

-------------------------------------------------------------------------------
API 2.1 (EM_API_VERSION_MAJOR=2, EM_API_VERSION_MINOR=1)
-------------------------------------------------------------------------------
  Backwards compatible with EM 2.0 API with one EXCEPTION:
  All fields of em_conf_t given to em_init() should be intialized properly
  (inludes the new em_conf_t::api_hooks field).

 1. EO-start buffering of sent events changed to apply only to scheduled queues:
    Events sent to scheduled queues from an EO-start function are buffered.
    The buffered events will be sent into the queues when the EO-start
    functions have returned - otherwise it would not be possible to send events
    to the EO's own queues as the EO is not yet in a started state. No buffering
    is done when sending to queues that are not scheduled.
    See include/event_machine/api/event_machine_eo.h
 2. EM API-callback hooks:
    EM API-callback hook functions can be registered for a selected set of
    EM APIs. The EM APIs in question are mostly fast path APIs, like em_send(),
    em_alloc() and em_free(). Control APIs generally do not need hook support.
    A registered user provided hook function will be called by EM each time the
    corresponding API is called.
    API-callback hooks enables the user to gather statistics, trace program and
    event flow etc. API hooks should not change the state of the events etc.
    they receive as arguments, nor should they call the same API from within the
    hook to avoid hook recursion.
    Hook support is only available when EM_API_HOOKS_ENABLE != 0.
    Currently hook functions can be registered/unregistered with:
      em_hooks_register_alloc() and em_hooks_unregister_alloc()
      em_hooks_register_free() and em_hooks_unregister_free()
      em_hooks_register_send() and em_hooks_unregister_send()
    Hooks can also be registered during EM initialization by setting
    em_conf_t::api_hooks when calling em_init().
    Note: EM_API_HOOKS_ENABLE must be set to '1' to enable API-hooks (default=1)
    See include/event_machine/platform/event_machine_hooks.h
 3. EM pool info and statistics:
    em_pool_info() - retieve information about an EM event pool
    em_pool_info_print() - print EM Pool information for a given event pool
    em_pool_info_print_all() - print EM Pool information for all event pools.
    Note: Set EM config file: pool.statistics_enable=true to enable event pool
    statistics to ge gathered (default: false), otherwise only basic info is
    output omitting pool usage information.
    See include/event_machine/platform/event_machine_pool.h

-------------------------------------------------------------------------------
API 2.0 (EM_API_VERSION_MAJOR=2, EM_API_VERSION_MINOR=0)
-------------------------------------------------------------------------------
 1. Introducing local queues for fast pipelining: EM_QUEUE_TYPE_LOCAL
    Local queues are special virtual queues bypassing the scheduler for
    fast core-local pipelining without load balancing or atomic processing.
    Use em_sched_context_type_current() to determine the inherited scheduling
    context type (none, atomic or ordered) when handling events from a
    local queue.
    See event_machine_queue.h and event_machine_scheduler.h
 2. Introducing output queues for system specific implementation of SW-HW
    interfaces, e.g. towards packet output or accelerators: EM_QUEUE_TYPE_OUTPUT
    See event_machine_queue.h
 3. Added optional 'conf' argument also to atomic-group queue creation for
    attributes and platform specific configuration.
    See event_machine_atomic_group.h.
 4. Added optional 'conf' argument to EO start for passing configuration.
    See event_machine_eo.h.
 5. Added alternative synchronous (blocking) versions of "asynchronous
    API functions with notifications" to make it possible to do a simple robust
    startup & shutdown. The synchronous API-functions do not return until the
    operation has been fully completed on all cores (the asynchronous APIs with
    notifications might return while the operation is still ongoing, thus
    notifications should be used to signal completion).
    Synchronous APIs are named with the '_sync' ending:
        - em_eo_add_queue_sync()
        - em_eo_remove_queue_sync(),
        - em_eo_remove_queue_all_sync(), set arg 'delete_queues = true' to also
                                         delete all of the EO's queues.
        - em_eo_start_sync()
        - em_eo_stop_sync()
        - em_queue_group_create_sync()
        - em_queue_group_delete_sync()
        - em_queue_group_modify_sync()
    Note that the other cores must be running the dispatch loop when a core is
    calling a _sync() function, otherwise the _sync()-operation might never
    complete.
    See event_machine_eo.h and event_machine_queue_group.h.
 6. Simplified queue and EO management - Queue enable and disable is removed
    and handled implicitly by EO-add-queue or EO-remove-queue calls.
    See event_machine_queue.h and event_machine_eo.h.
 7. Events sent from within an EO-start function are buffered and sent
    after the start-operation has completed. Otherwise it would not be
    possible to reliably send events from the EO start-function to the
    EO's own queues.
 8. Added further _find() functions: atomic group, queue, EO and pool.
    Can be used to lookup objects by name.
 9. Added em_queue_current() and em_eo_current() to obtain the currently
    active queue or EO.
10. Added em_eo_get_context(eo) to return the EO context of an EO.
11. Added functions to iterate through all objects:
      - EOs & associated queues:
           - em_eo_get_first(), em_eo_get_next()
           - em_eo_queue_get_first(), em_eo_queue_get_next()
      - queue groups & associated queues:
           - em_queue_group_get_first(), em_queue_group_get_next()
           - em_queue_group_queue_get_first(), em_queue_group_queue_get_next()
      - atomic groups & associated queues:
          - em_atomic_group_get_first(), em_atomic_group_get_next()
          - em_atomic_group_queue_get_first(), em_atomic_group_queue_get_next()
      - queues:
          - em_queue_get_first(), em_queue_get_next()
      - event groups:
          - em_event_group_get_first(), em_event_group_get_next()
      - pools:
          - em_pool_get_first(), em_pool_get_next()
    See each header for details (_get_first(), _get_next())
12. Slight EM header file reorganization.
    - EM init&term APIs moved into their own header file:
      include/event_machine/platform/event_machine_init.h and
    - EM Event Pool APIs moved into their own header file:
      include/event_machine/platform/event_machine_pool.h
    - em_dispatch() moved into the 'dispatcher' API:
      include/event_machine/api/event_machine_dispatcher.h
    - em_event_pointer() moved into the 'event' API:
      include/event_machine/api/event_machine_event.h

This is a larger enhancement release with new or modified arguments requiring
changes to legacy code. All main features remain.

-------------------------------------------------------------------------------
API 1.4 (EM_API_VERSION_MAJOR=1, EM_API_VERSION_MINOR=4)
-------------------------------------------------------------------------------
1. Added an optional 'conf' argument to queue creation for attributes and
   platform specific configuration.
   See event_machine_queue.h.
2. Event Pool name added - event pools can be given a name during creation and
   that name can be used to find the event pool handle later.
   See event_machine_hw_specific.h.

-------------------------------------------------------------------------------
API 1.3 (EM_API_VERSION_MAJOR=1, EM_API_VERSION_MINOR=3)
-------------------------------------------------------------------------------
 1. Enhancement and clarification of ordered queue behavior. New clarified
    ordering concept is similar to what ODP currently defines. See queue
    documentation for details.
 2. Added add-ons - directory for extra APIs not part of the standard base
    definition. See README at add-ons/
 3. Clarification of event group behavior for exceptional situations. See
    event group documentation.
 4. New API to send multiple events (em_send_multi, em_send_group_multi) for
    potential performance gain.
 5. New API to receive multiple events from unscheduled queues.
 6. Event timer API (add-on). See add-ons/event_machine_timer.h
 7. Added API to change event type (if compatible). See event_machine_event.h
 8. UNDEF - values of -1 (FFFFFFFF) deprecated. Implementation should use
    value 0 for any UNDEF. This makes it safer to initialize data to 0.

Backwards compatible.

-------------------------------------------------------------------------------
API 1.2 (EM_API_VERSION_MAJOR=1, EM_API_VERSION_MINOR=2)
-------------------------------------------------------------------------------
 1. Introduced a slightly modified header structure (headers by service group).
    Application only needs to include event_machine.h. Event group is now also
    part of the standard API.
 2. Added possibility to explicitly signal end of event group handling,
    see em_event_group_processing_end()
 3. Added possibility to assign a received event to an event group,
    see em_event_group_assign()
 4. Added recovery to event groups,
    see em_event_group_abort(), em_event_group_get_notif()
 5. Added a hint to the scheduler, see em_preschedule()
 6. Added common dispatcher callbacks for debug, statistics or new services,
    see em_dispatch_register_enter_cb(), em_dispatch_unregister_enter_cb(),
        em_dispatch_register_exit_cb(),  em_dispatch_unregister_exit_cb()
 7. Added APIs for unscheduled queues along with a new queue type,
    see em_queue_dequeue(), EM_QUEUE_TYPE_UNSCHEDULED(arg to em_queue_create())
 8. Added API call to ask for the event size, see em_event_get_size()
 9. Added missing APIs to ask for the names of objects (like queue groups)
10. Clarified documentation

Backwards compatible.

-------------------------------------------------------------------------------
API 1.1 (EM_API_VERSION_MAJOR=1, EM_API_VERSION_MINOR=1)
-------------------------------------------------------------------------------
1. Atomic Group concept added (see event_machine_atomic_group.h)
2. Option to send notifications to an event group added.
   See declaration of em_notif_t (moved to event_machine_hw_types.h)
3. em_event_group_is_ready() added and
   clarified usage rules of em_event_group_apply()
4. Minor documentation clarifications

Backwards compatible with one EXCEPTION (item 2):
  Introducing a new input field to an existing structure is potentially
  dangerous to existing code behavior as it is not initialized unless the
  application initialized the structure with 0 using e.g. memset() with
  sizeof(em_notif_t).
  EM_EVENT_GROUP_UNDEF or value 0 as .egroup should cause the legacy behaviour
  in all implementations.

-------------------------------------------------------------------------------
API 1.0 (EM_API_VERSION_MAJOR=1, EM_API_VERSION_MINOR=0)
-------------------------------------------------------------------------------
Initial API
