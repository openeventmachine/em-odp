name: CI

on: [push, pull_request, workflow_dispatch]

env:
  CC: gcc
  # Default target architecture for native compilation
  TARGET_ARCH: ""

jobs:
  # Perform lint check on shell scripts and YAML files
  Lint-Code-Base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout EM-ODP
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files
          # within `super-linter`
          fetch-depth: 0
      - name: Lint check
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build doxygen documentation
  Build-Doxygen:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install asciidoctor mscgen graphviz doxygen
        sudo apt-get install libconfig-dev
    - name: Build
      run: ./scripts/build.sh -d

  # Build EM-ODP and run robot tests on github hosted ubuntu runner
  Build-Run-on-Ubuntu-Runner:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        cc: [gcc, clang]
    env:
      CC: "${{matrix.cc}}"
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libconfig-dev
        sudo pip3 install robotframework
    - name: Checkout EM-ODP
      uses: actions/checkout@v2
    # Checkout ci for robot files
    - name: Checkout ci
      uses: actions/checkout@v2
      with:
        repository: ${{ github.repository_owner }}/ci
        clean: false
        path: ci
        ref: master
    - name: Build EM-ODP
      run: ./scripts/build.sh
    - name: Run Robot Tests
      run: |
        sudo sysctl -w vm.nr_hugepages=512
        grep Huge /proc/meminfo
        sudo /bin/bash ./scripts/robot_test.sh

  Cross-Compile-for-arm64:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Cross-compile EM-ODP for arm64
      run: >
          sudo docker run
          --privileged
          -i
          -v "${PWD}:/root/em-odp"
          --workdir="/root/em-odp"
          --shm-size 8g
          -e CC="aarch64-linux-gnu-gcc"
          -e TARGET_ARCH=aarch64-linux-gnu
          ghcr.io/opendataplane/odp-docker-images/odp-ci-ubuntu_18.04-arm64
          /root/em-odp/scripts/build.sh
