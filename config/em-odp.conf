# EM runtime configuration options
#
# This template configuration file (em-odp.conf) is hardcoded
# during the configure/build phase into em-odp and the values defined here are
# used at runtime unless overridden by the user with the optional environment
# variable EM_CONFIG_FILE=my-emodp.conf at program startup.
#
# This configuration file MUST include all configuration options.
#
# The environment variable EM_CONFIG_FILE can be used to override default values
# and it doesn't have to include all available options. The missing options are
# replaced with hardcoded default values.
#
# The options defined here are implementation specific and valid option
# values should be checked from the implementation code.

# Mandatory fields
em_implementation = "em-odp"
config_file_version = "0.0.6"

# Pool options
pool: {
	# Enable EM pool usage statistics collection during runtime (true/false)
	#
	# Pool usage statistics is updated e.g. during em_alloc() and em_free(),
	# thus, if enabled, inducing some overhead. Pool information can be
	# obtained by calling em_pool_info() and, if pool usage statistics is
	# enabled, will return also pool usage statistics.
	statistics_enable = false

	# Alignment offset in bytes for the event payload start address
	#
	# Set the event payload alignment offset for events allocated from
	# any pool. This is a global setting concerning all pools.
	# A similar, but pool-secific option, is 'em_pool_cfg_t:align_offset{}'
	# that overrides this global setting for a specific pool when given to
	# em_pool_create(..., pool_cfg).
	#
	# Use this option to globally adjust the payload layout so that a
	# specific part of it can be placed at a needed alignment for e.g.
	# HW access.
	#
	# The default EM event payload start address alignment is a power-of-two
	# that is at minimum 32 bytes (i.e. 32 B, 64 B, 128 B etc. depending on
	# e.g. target cache-line size).
	# The 'align_offset' option can be used to fine-tune the start-address
	# by a small offset to e.g. make room for a small SW header before the
	# rest of the payload that might need a specific alignment for direct
	# HW-access.
	# Example: setting 'align_offset = 8' makes sure that the payload
	# _after_ 8 bytes will be aligned at minimum (2^x) 32 bytes for all
	# pools that do not override this value.
	#
	#   start: base - align_offset
	#        |
	#        v
	#        +------------------------------------------+
	#        | <----- |  Event Payload                  |
	#        +------------------------------------------+
	#                 ^
	#                 |
	#                base (min 32B aligned, power-of-two)
	align_offset = 0
}

# Queue options
queue: {
	# Default minimum number of events that a queue can hold.
	#
	# This value will be used in queue creation (em_queue_create*()) if no
	# other size information has been provided via the
	# em_queue_conf_t::min_events parameter.
	# Setting 'min_events_default = 0' will use the odp-implementation's
	# default values (might vary from one odp-implementation to another).
	min_events_default = 4096
}

# Event-Chaining options
event_chaining: {
	# Note:
	# The user _must_ provide an implementation for the overrideable
	# 'event_send_device()' and 'event_send_device_multi()' functions in
	# order to use Event-Chaining functionality!
	# The functions are declared with '__attribute__((weak))' in the EM-lib
	# to allow overriding.
	# Linking user code, which includes overrides for those functions,
	# against the EM-lib will replace the stubs with the user provided
	# variants.

	# Number of queues used for ordering event-chaining events
	#
	# Maintain the order of events sent to an another device from within
	# an EM ordered context (i.e. send from within the EO receive function
	# when handling an event from a parallel-ordered queue).
	# An event-chaining queue has no 'real' queue associated with it, the
	# queue-id simply indicates that events sent to the queue should be
	# sent out of EM via a user specified function (and perhaps out towards
	# another device). Sending events out of EM requires some intervention,
	# especially sending during an ordered context needs to maintain the
	# event order as determined by the context. To maintain event order for
	# event-chaining queues, em-odp uses a set of 'real' queues for order
	# tracking - the number of these queues is set by the following option:
	# (0 = no ordering)
	num_order_queues = 8
}