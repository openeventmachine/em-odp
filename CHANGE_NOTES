Copyright (c) 2013-2021, Nokia Solutions and Networks
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
  * Neither the name of the copyright holder nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

===============================================================================
CHANGE NOTES - Event Machine (EM) on ODP (em-odp)
===============================================================================

The EM version numbering scheme reflects the used EM API version:
maj.min.impl(-fix)
    maj.min = EM API version supported
              maj = major API version number, reserved for big changes
             .min = minor API version, incremented when the API changes
      .impl = Implementation number supporting EM API version maj.min
              Updated for implementations with no API changes, starts at .0
       -fix = Fix number, added for bugfixes on a certain implementation
              version maj.min.impl (-0 is not added, first fix is -1)
Examples:
 1) EM version 2.7.0
    maj.min = 2.7: supports EM API v2.7
      .impl =  .0: first implementation supporting API 2.7 (starts at .0)
       -fix = n/a, no fix
 2) EM version 2.7.1-3
    maj.min = 2.7: supports EM API v2.7
      .impl =  .1: second implementation supporting API 2.7 (starts at .0)
       -fix =  -3: third bugfix for 2.7.1

- See em-odp/README for usage and compilation instructions.
- See em-odp/include/event_machine/README_API for API changes

--------------------------------------------------------------------------------
Event Machine (EM) on ODP v2.7.0
--------------------------------------------------------------------------------
- Support for EM API v2.7 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API.
  * New APIs for Version, Event User Area, Event User Area ID *

- EM config file options - config/em-odp.conf:
 - Config file version number bumped up to "0.0.10"
 - Change the default Queue priority mode:
   queue.priority.map_mode = 1
     1: map according to ODP runtime number of priorities
        (linear fit to full range of ODP priorities available)
 - The Event User Area default size can be set via the 'user_area_size' option:
   config/em-odp.conf:
     pool: {
        ...
        # Default event user area size in bytes for all events from all pools.
        #
        # This is a global setting that can be overridden per pool using
        # 'em_pool_cfg_t::user_area{}' with em_pool_create().
        #
        user_area_size = 0
        ...
     }

- Tested against
  odp-linux - https://github.com/OpenDataPlane/odp
    Commit: 795d576fb46db723d0b5e11a20111bab574a5d0a [795d576]
    Date: Tuesday, 21 December 2021 11:42.06
    Commit Date: Monday, 27 December 2021 14:47.34
    linux-gen: sched: update random data table
  odp-dpdk - https://github.com/OpenDataPlane/odp-dpdk
    Commit: c3789c8e6ec34faee0b59080c1ab187cff1dc356 [c3789c8]
    Date: Friday, 17 December 2021 14:00.35
    Merge ODP v1.33.0.0

--------------------------------------------------------------------------------
Event Machine (EM) on ODP v2.6.0
--------------------------------------------------------------------------------
- Support for EM API v2.6 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API.
  * New APIs for Timer, Event, Queue, Extension-APIs *

- New configure script option (see em-odp/configure.ac):
  '--enable-debug-print' that enables EM debug printouts via the EM_DBG() macro:
        em-odp/build $> ../configure --prefix=… --enable-debug-print
  Currently if enabled, will print event header layout information at startup
  as well as EM timer runtime debug info.

- EM config file options - config/em-odp.conf:
 - Config file version bumped to "0.0.9" (user config files need to be updated!)
 - Options for setting EM Queue priority-levels:
   a) Option 'queue.priority.map_mode':
     Select the queue priority mapping mode, i.e how to map EM queue priorities
     to ODP scheduled queue priorities.
     0: legacy simple mode, map EM prios to ODP min/default/max prio-levels only
        (0 is the default mode)
     1: map according to the ODP runtime number of priorities
        (linear fit to full range of ODP prio-levels)
     2: custom mapping
        (use 'custom_map' below)
   b) Option 'queue.priority.custom_map':
     Custom priority map (required when 'queue.priority.map_mode = 2')
     This array needs to have EM_QUEUE_PRIO_NUM entries (typically 8).
     The first entry is for the lowest priority (0). The value is ADDED to
     odp_schedule_min_prio() and then passed to ODP, i.e. values are offsets
     from odp_schedule_min_prio(). Values given here must be valid for ODP
     runtime configuration, i.e. value plus odp_schedule_min_prio() must
     not exceed odp_schedule_max_prio().
     Example of a custom priority mapping:
        queue: {
                priority: {
                        map_mode = 2
                        custom_map = [0, 0, 1, 3 ,4 ,6 ,7, 7]
                }
        }

- EM SW ISA printout added at start-up:
    ...
    ===========================================================
    EM Info on target: em-odp
    ===========================================================
    EM API version:         v2.6, 64 bit (EM_CHECK_LEVEL:3, EM_ESV_ENABLE:1)
    EM build info:          v2.6.0 2021-10-15 16:46
    ODP API version:        1.32.0
    ODP impl name:          odp-linux
    ODP impl details:       odp-linux 1.32.0-0 (v1.32.0) 1.32.0.0
    CPU model:              Intel(R) Xeon(R) CPU E5-2697 v3
    CPU arch:               x86     // ARM etc.
    CPU ISA version:        Unknown // ARMv8.2-A  # HW detected, reported by ODP
     SW ISA version (ODP):  x86_64  // ARMv8.1-A  # ODP SW config (compile time)
     SW ISA version (EM):   x86_64  // ARMv8.1-A  #  EM SW config (compile time)

  Arch specific CFLAGS should be passed to EM and ODP via configure.
  Example for a made up ARMv8 SoC called "soc-x":
  odp-soc-x/build> ../configure … --with-platform=soc-x [default=linux-generic]
     em-odp/build> ../configure … CFLAGS=”-march=armv8.2-a+… -mcpu=soc-x”
  The whole chain of used SW libs/dependencies should preferably be compiled
  with the same -march/-mcpu options for best results:
    other-libs/build> ../configure … CFLAGS=”-march=armv8.2-a+… -mcpu=soc-x”

- Program termination: flush the scheduler in em_term_core() on each EM-core.
  Move the flushing of scheduled events from em_term() to em_term_core() so that
  all participating EM-cores do it.
  See example usage of in em-odp/programs/common/cm_setup.c:
  ('thread' in the description below refers to odph_thread_t that can be either
   linux processes or threads)
  em_term() has been moved from each EM-core's run-function to the common thread
  that created the EM-core threads. The common thread waits for the created
  EM-core threads to return/join.
  After each EM-core has paused and flushed the scheduler from core-local events
  (by calling em_term_local()) they terminate by "joining" back into the common
  thread, which calls em_term() once to terminate EM (and ODP) before exiting
  the application.

- Fixes:
  - queue group: fix: em_queue_group_modify_sync() incorrectly removed the
                      calling core
  - ESV: fix: usr2em-revert transition to handle evgen wrap correctly
    Event State Verification (ESV) incorrectly handled the revert of a usr-to-EM
    transition when the counter wrapped.

- Example programs (em-odp/programs)
  - Common Setup (cm_setup.c&h):
    - Move the flushing of scheduled events from em_term() to em_term_core().
      Descibed above in "Program termination".
  - Packet-IO setup (cm_pktio.c&h)
    - Add command-line option to select whether to use an
      1) ODP-packet-pool: -o, --pktpool-odp
         or an
      2) EM event-pool: -e, --pktpool-em (default if no option given)
      as the main event pool to be used by packet-io for received packets.
      Packet-IO is implemented via ODP so an EM event-pool needs to be converted
      to the corresponding ODP packet-pools with the new extension API
      'em_odp_pool2odp()'. Using an EM pool, instead of directly using an
      ODP pool, allows for more thorough ESV-checking also for packet-IO when
      em-odp.conf: esv.prealloc_pools = true.
  - Timer
  - Misc. performance and bug fixes in the example applications

- Tested against
  odp-linux - https://github.com/OpenDataPlane/odp
    Commit: 69f27643ec2287875048314d7975f0de4bcbbfa4 [69f2764]
    Date: Friday, 1 October 2021 18:12.09
    Commit Date: Tuesday, 12 October 2021 17:06.16
    configure.ac: move project to C standard revision 11
  odp-dpdk - https://github.com/OpenDataPlane/odp-dpdk
    Commit: 50c7b605b97474d26fcf600b4061968e3543b45b [50c7b60]
    Date: Monday, 11 October 2021 16:37.51
    Merge ODP v1.32.0.0

--------------------------------------------------------------------------------
Event Machine on ODP v2.5.0
--------------------------------------------------------------------------------
- Support for EM API v2.5 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API.
  * Changes for ESV, Timer, Event, Pool, Extension-APIs, C++ *

- Error: don't allow error handlers to return fatal EM-errors.
  Fatal EM reported errors must be dealt with in the error handler, since EM
  cannot continue running after a fatal error.
  EM will now abort if an error handler returns a fatal error.

- Event State Verification (ESV)
  ESV is an EM-internal feature that aims to catch invalid EM-event usage.
  The idea is to catch invalid/illegal EM event usage in the application and
  report it as a FATAL-error to immediately abort the application​.
  The event-state is tracked and updated every time the event is transferred
  between EM and the application, e.g. in dispatch, em_send(), em_alloc(),
  em_free() etc.​
  Example scenarios that are detected:​ double-free, double-send, use-after-send,
  use-after-free etc.
  Additionally, an event-generation-count (evgen) has been added into the
  EM event handle (em_event_t) to catch usage of events that are no longer
  “owned” by the application (EO).
  The event handle will also change throughout the lifetime of the event.
  Using an out-of-date/obsolete event handle results in ESV error​.
  An event handle becomes invalid after it has been given to EM, e.g. reusing a
  stored event-handle after it has been sent will result in error, even if the
  same event would have been received again, because the event-handle has
  changed​.
  ESV is (currently) disabled by default and can be taken into use via a
  configure-option​:
        em-odp/build $> ../configure --prefix=… --enable-esv​
        em-odp/build $> make clean && make –j16 install​
  Using --enable-esv defines EM_ESV_ENABLE as ‘1’.
  ​
  Example Scenario - ESV Error:
    a) EO-receives an event​
    b) em_send(event, …)​ - EO sends the event
    c) em_free(event)    - EO calls free for an already sent event
       ==> Fatal Error:
   "
   EM ERROR:0x80000010  ESCOPE:0xFF000603  EO:0x5-"eo-a"​
   core:00 ecount:0(0) em_event_state.c:335 evstate_error()​
   Event:0x27f4a84c5d9c0 state error -- \
      counts current(vs.expected): evgen:2(3) free:1(1) send:1(0)​
      prev-state:em_send() core:00: EO:0x5-"eo-a" Q:0x1d-"q-a" u32[0]:0x00000000​
   => new-state:em_free()  core:00: EO:0x5-"eo-a" Q:0x1d-"q-a" u32[0]:0x00000000​
      event:0x00027f4a84c5d9c0: ptr:0x7f4a84c5d9c0
   "
  Note: ESV-errors are always reported with the same error-code:​
        EM_FATAL(EM_ERR_EVENT_STATE) = 0x80000010​
	'prev-state' shows the previous good state of the event. i.e. the
	previous place where EM observed the event in a valid state.
	'new-state' shows the current detected illegal state that
	caused the error.

  Using ESV has an impact on performance.
  Each event-state transition updates an atomic counter and stores further
  state data (EO, queue, core etc)​.
  The impact, of course, depends on the “number of state-transitions / second”​

- Event State Verification (ESV) options - config/em-odp.conf:
  Note: Options only considered if ESV is enabled at compile-time
          via the configure option '--enable-esv', see configure.ac
  - Option 'esv.enable'
    Runtime ESV enable/disable option. Allows the user to disable ESV
    without recompilation when 'configure --enable-esv'.
  - Option 'esv.store_payload_first_u32'
    Store the first 32bits of the event payload during each valid
    event-state transition. This allows for a comparison of the payload
    content between the previous valid state and the invalid state.
    Note: The first 32bits of the payload will always be printed in the
          error log for the invalid state regardless of this setting.
    Enabling will impact performace somewhat.
  - Option 'esv.prealloc_pools'
    Preallocate all events in a pool during pool creation to set
    an initial ESV-state for each event that can be tracked over
    multiple allocs and frees.

- EM config file options - config/em-odp.conf:
  - Option 'pool.pkt_headroom':
    Default minimum packet headroom in bytes for events allocated from
    EM-pools of type: EM_EVENT_TYPE_PACKET. Ignored for other pool types.

- Fixes:
  - timer: fix timer capability max_tmo values
  - event: fix: incorrect loop index when allocating multiple events
  - queue: fix em_queue_get_index() return on error
  - code style fixes (reported by code checkers)

--------------------------------------------------------------------------------
Event Machine on ODP v2.4.0
--------------------------------------------------------------------------------
- Support for EM API v2.4 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API.
  * Changes for the Timer, Pool, EO and Queue APIs *

- Parameter/attribute initialization function usage is now mandatory before
  calling "create"-functions for EO-multircv, Timer and Pool:
    - call em_eo_multircv_param_init() before em_eo_create_multircv()
    - call em_pool_cfg_init() before em_pool_create()
    - call em_timer_attr_init() before em_timer_create()

- Build:
  - configure: option --with-odp-lib=[name of used odp library] added.
    Add the 'configure' script option --with-odp-lib=odp-library-name
    that allows the user to specify the name of the used ODP library.
    The library name defaults to "libodp-linux" if the option is omitted.
    E.g. configure em-odp to use odp-dpdk instead of odp-linux:
      > cd em-odp/build
      > ../configure ... [--with-odp-path=...] --with-odp-lib=libodp-dpdk
      > make
  - pkg-config: update em-odp dependencies in the package config file.
    Add explicit dependency on ODP: "Requires: @libodp_name@" (where the ODP
    library name is taken from the configure option --with-odp-lib=... if given)
    (em-odp/pkgconfig/libemodp.pc.in => <install-dir>/lib/pkgconfig/libemodp.pc)
  - Support for 'make dist' and 'make distcheck'
    - make dist: create em-odp-2.4.0.tar.gz distribution
    - make distcheck: validate the distribution,
      i.e. use the .tar.gz: compile, install, clean etc.

- Fixes:
  - GCC 10 compilation fixed
  - pool: incorrect return value used when EM-pool creation failed
  - em_eo_get_name() return value used incorrectly
  - Refactoring EM example program startup

--------------------------------------------------------------------------------
Event Machine on ODP v2.3.0
--------------------------------------------------------------------------------
- Support for EM API v2.3 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API:
    - Event: multi-event alloc and free functions
    - Hooks: use the same hook-type for all allocs and the same for all frees
    - EO: multi-event EO-receive function
    - Dispatch: one common enter-callback for multi- and single-receive funcs.
    - Init: core masks for input_poll_fn and output_drain_fn added to em_conf_t
    - Init: use em_conf_init(em_conf_t *conf) to init the EM config params.
    - Event: APIs to get the event type(s) of multiple events
- Fix libemodp symbol visibility, only expose API symbols
- New example program:     timer_test_periodic
  New packet-io programs:  loopback_local_multircv, loopback_multircv
  New performance program: loop_multircv

--------------------------------------------------------------------------------
Event Machine on ODP v2.2.0
--------------------------------------------------------------------------------
- Support for EM API v2.2 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API.
- EM config file options - config/em-odp.conf
    - Option 'pool.align_offset':
      (Replaced 'pool.alloc_align' with 'pool.align_offset')

      Alignment offset in bytes for the event payload start address.
      Set the event payload alignment offset for events allocated from
      any pool. This is a global setting concerning all pools.
      A similar, but pool-secific option, is 'em_pool_cfg_t:align_offset{}'
      that overrides this global setting for a specific pool when given to
      em_pool_create(..., pool_cfg).

      Use this option to globally adjust the payload layout so that a
      specific part of it can be placed at a needed alignment for e.g.
      HW access.

      The default EM event payload start address alignment is a power-of-two
      that is at minimum 32 bytes (i.e. 32 B, 64 B, 128 B etc. depending on
      e.g. target cache-line size).
      The 'align_offset' option can be used to fine-tune the start-address
      by a small offset to e.g. make room for a small SW header before the
      rest of the payload that might need a specific alignment for direct
      HW-access.
      Example: setting 'align_offset = 8' makes sure that the payload
      _after_ 8 bytes will be aligned at minimum (2^x) 32 bytes for all
      pools that do not override this value.

      start: base - align_offset
           |
           v
           +------------------------------------------+
           | <----- |  Event Payload                  |
           +------------------------------------------+
                    ^
                    |
                   base (min 32B aligned, power-of-two)
- New autoconf configure-script options (configure.ac):
    --without-programs
      Build the EM library without example programs
    --with-config-file=FILE
      Override the default EM configuration file (default:config/em-odp.conf)
      that is used during the configure & build phases to generate the built-in
      default values for the EM runtime-config (note that runtime config options
      can further be changed during startup by setting the EM_CONFIG_FILE=file
      variable).
      The overriding file set with --with-config-file=FILE must include all
      EM configuration options (unlike the runtime file that only need to
      include the mandatory and changed options).
    --enable-check-level=VAL(0…3)
      Set the compile-time EM_CHECK_LEVEL,
      see include/event_machine/platform/event_machine_config.h

--------------------------------------------------------------------------------
Event Machine on ODP v2.1.2
--------------------------------------------------------------------------------
- EM config file options - config/em-odp.conf
  EM runtime configuration options added. The user can optionally override
  default config options by setting the environmental variable 'EM_CONFIG_FILE'
  to point to an alternative config file with desired values, e.g.:
        $ sudo EM_CONFIG_FILE=./my-overrides.conf ./em-application -c 0xfe
  The configuration file values in config/em-odp.conf are the default values
  set for em-odp during the configure/build phase and the values defined there
  are used unless overrided via the optional EM_CONFIG_FILE. A user provided
  config file does not have to include all available options, only the mandatory
  options as well as the options that the user wants to change can be included
  (while the missing options will be replaced with the default build-time
   values).
    - Option 'pool.statistics_enable':
      Enable EM pool usage statistics collection during runtime (true/false).
      Pool usage statistics is updated e.g. during em_alloc() and em_free(),
      thus, if enabled, inducing some overhead. Pool information can be
      obtained by calling em_pool_info() and, if pool usage statistics is
      enabled, will return also pool usage statistics.
    - Option 'pool.alloc_align': (changed to 'pool.align_offset' in v2.2.0)
      Alloc alignment in bytes, default = 0 (no extra alignment requirement)
      Set the exact alignment of the event payload start address (in bytes).
      The event payload address returned by em_event_pointer(event) will
      have the this alignment. Use power of two values only.
    - Option 'queue.min_events_default':
      Default minimum number of events that a queue can hold.
      This value will be used in queue creation (em_queue_create*()) if no
      other size information has been provided via the
      em_queue_conf_t::min_events parameter.
      Setting 'min_events_default = 0' will use the odp-implementation's
      default values (might vary from one odp-implementation to another).
    - Option 'event_chaining.num_order_queues'
      Number of queues used for ordering event-chaining events.
      Maintain the order of events sent to another device from within
      an EM ordered context (i.e. send from within the EO receive function
      when handling an event from a parallel-ordered queue).
      An event-chaining queue has no 'real' queue associated with it, the
      queue-id simply indicates that events sent to the queue should be
      sent out of EM via a user specified function (and perhaps out towards
      another device). Sending events out of EM requires some intervention,
      especially sending during an ordered context needs to maintain the
      event order as determined by the context. To maintain event order for
      event-chaining queues, em-odp uses a set of 'real' queues for order
      tracking - the number of these queues is set by this option.
      Note, 0 = no ordering.
- Event alloc size must be larger than zero, i.e. em_alloc(sz > 0, ...)
- Optimizations and performance improvements

--------------------------------------------------------------------------------
Event Machine on ODP v2.1.1
--------------------------------------------------------------------------------
- Example programs support graceful Ctrl-C termination, see em-odp/programs.
  Pressing Ctrl-C (once) initiates graceful example program termination instead
  of abruptly killing it. A second press of Ctrl-C will always kill the program
  immediately.
- Added the programs/performance/loop example that simply loops received events
  back into the queue they originated from and measures the per core
  performance (cycles/core and millions-of-events/core).
- Optimizations and performance improvements

--------------------------------------------------------------------------------
Event Machine on ODP v2.1.0
--------------------------------------------------------------------------------
- Support for EM API v2.1 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API.
  Backwards compatible with EM 2.0 API as long as all fields of em_conf_t given
  to em_init() are intialized properly (inludes the new em_conf_t::api_hooks
  field).
- the EM_DEBUG #define has been removed and the behaviour made default.
- EM Timer: check the timer attributes against odp-timer capabilities during
  timer creation.
- Detect packets from outside of EM and initialize them as events before further
  EM processing.

--------------------------------------------------------------------------------
Event Machine on ODP v2.0.0
--------------------------------------------------------------------------------
- Support for EM API v2.0 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API
  Note: This is a larger enhancement release with new or modified arguments
        requiring changes to legacy code. All main features remain.
- Example/test application updated to use API v2.0.
- New examples for new API v2.0 features:
    - Local Queues:
      programs/example:     queue/queue_types_local.c
      programs/packet_io:   loopback_local.c
                            multistage_local.c
      programs/performance: queues_local.c
    Output Queues:
      All packet I/O examples have been updated to use output queues.
    Sync APIs:
      Example start-up has been modified to use _sync() versions of APIs.
    etc.

--------------------------------------------------------------------------------
Event Machine on ODP v1.4.0
--------------------------------------------------------------------------------
- Support for EM API v1.4 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API.
  Add a queue configuration argument to em_queue_create/_static(..., *conf).
  The 'conf' argument is optional (can be NULL) and can be used to pass extra
  attributes to the system specific implementation.
  See 'em_queue_conf_t' in include/event_machine/api/event_machine_types.h and
  the supported conf->flags in
  include/event_machine/platform/event_machine_hw_types.h:
  - conf->min_events can be used to request the 'minimum number of events' that
    a queue should be able to contain.
  - conf->flags can be used to request certain properties for the queue.
    At the time of writing odp supports these flags only for unscheduled queues.
    An unscheduled queue can be created as 'single-producer & single-consumer'
    by setting the following flags:
      unsch_conf->flags  = EM_QUEUE_FLAG_ENQ_NOT_MTSAFE;
      unsch_conf->flags |= EM_QUEUE_FLAG_DEQ_NOT_MTSAFE;
    An unscheduled queue can be created as 'non-blocking & lock-free' by setting
    the following flag:
      unsch_conf->flags = EM_QUEUE_FLAG_NONBLOCKING_LF;

  Event Pool name added - event pools can be given a name during creation and
  that name can be used to find the event pool handle later.
  The pool name given to em_pool_create(name, ...) can be used later on any
  core to obtain the event pool handle. em_pool_find() and em_pool_get_name()
  are new functions related to the added 'name'.

--------------------------------------------------------------------------------
Event Machine on ODP v1.3.0
--------------------------------------------------------------------------------
- Support for EM API v1.3 (em-odp/include), see API changes in
  em-odp/include/event_machine/README_API
- Support for EM add-ons APIs, here the EM event timer API v1.0, read about
  add-on APIs in em-odp/include/event_machine/add-ons/README.
  See new event timer examples/tests in em-odp/programs/example/add-ons/

--------------------------------------------------------------------------------
Event Machine on ODP v1.2.3
--------------------------------------------------------------------------------
- eo: em_eo_start(): if EO local-start functions are used: enable all the EO's
  queues only after the local-start funcs have been successfully run on all
  cores.

- eo: em_eo_stop(): the EO's global-stop function should be run only after all
  local-stop functions have completed on all cores. The EO's global-stop
  function can only be called after each core has seen and handled the
  stop-request, even if no local-stop functions are used, to ensure that no
  core is still processing EO-related code.

- eo: em_eo_delete() should remove all the remaining queues from the EO and
  delete them before deleting the actual EO.

- bugfix: queue group: incorrect check for zero mask during queue group delete.
  Calling em_queue_group_delete() could lead to an incorrectly reported error
  if the core mask was not modified to zero before deleting the queue group.
  Corrected.

- event group: add the EM_EVENT_GROUP_SAFE_MODE option (enabled by default).
  Guards event groups in undefined and error situations.
  Excess and aborted group events don't belong to a valid group when received.
  Most event group APIs check if the core local event group has expired during
  the receive function. Impacts performance when event groups are used.
  Set EM_EVENT_GROUP_SAFE_MODE to '0' to disable.

- misc: code clean-ups.

--------------------------------------------------------------------------------
Event Machine on ODP v1.2.2
--------------------------------------------------------------------------------
- ARM compilation and event alignment issues fixed

- EM packet pool size and packet pool buffer size defined in configuration
  parameters (event_machine_config.h)

- Build system changes
  - Installed header files added in library makefile
  - Shared object version information added
  - Unused package version number removed
  - Minor gitignore fix

--------------------------------------------------------------------------------
Event Machine on ODP v1.2.1
--------------------------------------------------------------------------------
- em_queue_group_get_name() implemented

- Strict style checking taken in use
  - Source files modified accordingly

- ODP specific API extensions implemented for packet I/O
  - EM internal includes removed from packet I/O setup

- Requires ODP v1.10.0.0 / v1.10.1.0

--------------------------------------------------------------------------------
Event Machine on ODP v1.2.0
--------------------------------------------------------------------------------
- First EM implementation on top of ODP, providing the same example
  applications than OpenEM.

- Support for EM API v1.2
  - em_queue_group_get_name() not yet implemented, waiting for ODP support

- Requires ODP v1.9.0.0
